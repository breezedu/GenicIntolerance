ans=lars(SNP[,],hw2_genes[,1],type="lar",normalize=TRUE)
summary(ans)
coef(ans)
plot(ans)
plot(ans,xvar="step")
X11()
plot(ans)
X11()
plot(ans,xvar="step")
summary(ans)
r=linearRidgeGenotypes("SNP.txt","expression.txt")
coef(ans)
## summary ANS
summary(ans)
summary(ans)
r=linearRidgeGenotypes("SNP.txt","expression.txt")
library(lars)
q()
soft.pkgs <- c("AnnotationHub",
"BSgenome",
"Biobase",
"Biostrings",
"GEOquery",
"GenomeInfoDb",
"GenomicFeatures",
"GenomicRanges",
"IRanges",
"Rsamtools",
"ShortRead",
"biomaRt",
"minfi",
"oligo",
"rtracklayer")
data.pkgs <- c("ALL",
"BSgenome.Hsapiens.UCSC.hg19",
"BSgenome.Scerevisiae.UCSC.sacCer2",
"TxDb.Hsapiens.UCSC.hg19.knownGene",
"airway",
"hgu95av2.db",
"leeBamViews",
"leukemiasEset",
"minfiData",
"yeastRNASeq",
"zebrafishRNASeq")
biocLite(c(soft.pkgs, data.pkgs))
biocLite(c(soft.pkgs, data.pkgs))
soft.pkgs <- c("AnnotationHub",
"BSgenome",
"Biobase",
"Biostrings",
"GEOquery",
"GenomeInfoDb",
"GenomicFeatures",
"GenomicRanges",
"IRanges",
"Rsamtools",
"ShortRead",
"biomaRt",
"minfi",
"oligo",
"rtracklayer")
data.pkgs <- c("ALL",
"BSgenome.Hsapiens.UCSC.hg19",
"BSgenome.Scerevisiae.UCSC.sacCer2",
"TxDb.Hsapiens.UCSC.hg19.knownGene",
"airway",
"hgu95av2.db",
"leeBamViews",
"leukemiasEset",
"minfiData",
"yeastRNASeq",
"zebrafishRNASeq")
biocLite(c(soft.pkgs, data.pkgs))
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c(soft.pkgs, data.pkgs))
plotRanges <- function(x, xlim = x, main = deparse(substitute(x)),
+ col = "black", sep = 0.5, ..)
+ { height <-1
+ if (is(xlim, "Ranges"))
+ xlim <- c(min(start(xlim)), max(end(xlim)))
+ bins <- disjointBins(IRanges(start(x), end(x) +1))
+ plot.new()
+ plot.window(xlim, c(0, max(bins)*(height + sep)))
+ ybottom <- bins * (sep + height) - height
+ rect(start(x) - 0.5, ybottom, end(x) + 0.5, ybottom + height, col = col, ...)
+ title(main)
+ axis(a)
+ }
plotRanges <- function(x, xlim = x, main = deparse(substitute(x)),
+ col = "black", sep = 0.5, ..)
+ { height <-1
+ if (is(xlim, "Ranges"))
+ xlim <- c(min(start(xlim)), max(end(xlim)))
+ bins <- disjointBins(IRanges(start(x), end(x) +1))
+ plot.new()
+ plot.window(xlim, c(0, max(bins)*(height + sep)))
+ ybottom <- bins * (sep + height) - height
+ rect(start(x) - 0.5, ybottom, end(x) + 0.5, ybottom + height, col = col, ...)
+ title(main)
+ axis(a)
+ }
library(GenomicRanges)
library(IRanges)
library(IRanges)
library(GenomicRanges)
biocLite
biocLite()
library(IRanges)
library(GRanges)
library(IRanges)
library(IRanges)
library(IRanges)
library(BiocGenerics)
library(IRanges)
biocLite()
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
library(IRanges)
library(GenomicRanges)
library(GenomicRanges)
source("http://bioconductor.org/biocLite.R")
biocLite()
library(IRanges)
library(GenomicRanges)
library(GenomicRanges)
library(GenomeInfoDb)
soft.pkgs <- c("AnnotationHub",
"BSgenome",
"Biobase",
"Biostrings",
"GEOquery",
"GenomeInfoDb",
"GenomicFeatures",
"GenomicRanges",
"IRanges",
"Rsamtools",
"ShortRead",
"biomaRt",
"minfi",
"oligo",
"rtracklayer")
data.pkgs <- c("ALL",
"BSgenome.Hsapiens.UCSC.hg19",
"BSgenome.Scerevisiae.UCSC.sacCer2",
"TxDb.Hsapiens.UCSC.hg19.knownGene",
"airway",
"hgu95av2.db",
"leeBamViews",
"leukemiasEset",
"minfiData",
"yeastRNASeq",
"zebrafishRNASeq")
biocLite(c(soft.pkgs, data.pkgs))
library(GenomicRanges)
library(IRanges)
table <- read.table("exon_level_process_v2.txt")
table <- read.table("D:/GitHub Repositories/DataStats/Data_Analysis_Duke/SQProjectexon_level_process_v2.txt")
table <- read.table("D:/GitHubRepositories/DataStats/Data_Analysis_Duke/SQProjectexon_level_process_v2.txt")
table <- read.table("D:/GitHubRepositories/DataStats/Data_Analysis_Duke/SQProject/exon_level_process_v2.txt")
## assign column names
colnames(table) <- c("chr", "gene", "dom", "subdom", "exon", "gene.dom",
"gene.dom.subdom",
"envarp",    # pass
"envarpf",   # pass functional
"envarpfr",  # pass functional rare
"emutr")     # mutation rate
## attract data from the original table??
table<-within(table,envarpfc<-envarpf-envarpfr)#y
table<-within(table,gene<-factor(gene))
table<-within(table,gene.dom<-factor(gene.dom))
table<-within(table,gene.dom.subdom<-factor(gene.dom.subdom))
#table<-table[1:100,]
#for the use of counting number of gene
sumenvarp<-aggregate(table$envarp, by=list(Category=table$gene), FUN=sum)
sumenvarpfc<-aggregate(table$envarpfc, by=list(Category=table$gene), FUN=sum)[,2]
## simplify table1
table1<-data.frame(cbind(sumenvarp,sumenvarpfc))
## assign column names to table1
colnames(table1)<-c("gene","sumenvarp","sumenvarpfc")
library("Matrix")
library("lme4")
library("rstan")
## For execution on a local, multicore CPU with excess RAM we recommend calling
## rstan_options(auto_write = TRUE)
## options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
gene_code<-"
data{   #get the data we have
int <lower=0> N; #number of obs
int <lower=0> J; #number of gene level
int <lower=1,upper=J> gene[N];
vector[N] x;  #x
int <lower=0> y[N] ; #y
}
parameters{ #specify the parameter we want to know
vector[J] a;  #random intercept when gene is the level
real <lower=0> sigma_a;  #variance of intercept
real <lower=0> sigma_epsilon; #variance of dispersion
real beta;    #common slope;
vector[N] epsilon_raw;
}
transformed parameters{ #specify the model we will use
vector[N] lambda;
vector[N] epsilon; #amount of dispersion
for (i in 1:N)
epsilon[i]<-sigma_epsilon*epsilon_raw[i];
for (i in 1:N)
lambda[i] <- beta*x[i]+a[gene[i]]+epsilon[i];#specify the group
}
model { #give the prior distribution
beta ~ normal(0,10);
a ~ normal(0, sigma_a);
epsilon_raw~normal(0,1);
y ~ poisson_log(lambda); #y and y_hat should have same type
}
"
N<-dim(table)[1]
J<-dim(table1)[1]
gene<-as.numeric(table$gene)
genelevel<-length(unique(gene))
index<-match(gene, unique(gene))
M1_table<-list(N=N, J=J, y=table$envarpfc,
x=table$envarp,gene=index)
fit1 <- stan(model_code=gene_code, data=M1_table, iter=100, chains=4)
fit1 <- stan(model_code=gene_code, data=M1_table, iter=100, chains=4)
q()
table <- read.table("D:/GitHubRepositories/DataStats/Data_Analysis_Duke/SQProject/exon_level_process_v2.txt")
## assign column names
colnames(table) <- c("chr", "gene", "dom", "subdom", "exon", "gene.dom",
"gene.dom.subdom",
"envarp",    # pass
"envarpf",   # pass functional
"envarpfr",  # pass functional rare
"emutr")     # mutation rate
## attract data from the original table??
table<-within(table,envarpfc<-envarpf-envarpfr)#y
table<-within(table,gene<-factor(gene))
table<-within(table,gene.dom<-factor(gene.dom))
table<-within(table,gene.dom.subdom<-factor(gene.dom.subdom))
table<-table[1:1000,]
sumenvarp<-aggregate(table$envarp, by=list(Category=table$gene), FUN=sum)
sumenvarpfc<-aggregate(table$envarpfc, by=list(Category=table$gene), FUN=sum)[,2]
## simplify table1
table1<-data.frame(cbind(sumenvarp,sumenvarpfc))
## assign column names to table1
colnames(table1)<-c("gene","sumenvarp","sumenvarpfc")
library("Matrix")
library("lme4")
library("rstan")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
gene_code<-"
data{   #get the data we have
int <lower=0> N; #number of obs
int <lower=0> J; #number of gene level
int <lower=1,upper=J> gene[N];
vector[N] x;  #x
int <lower=0> y[N] ; #y
}
parameters{ #specify the parameter we want to know
vector[J] a;  #random intercept when gene is the level
real <lower=0> sigma_a;  #variance of intercept
real <lower=0> sigma_epsilon; #variance of dispersion
real beta;    #common slope;
vector[N] epsilon_raw;
}
transformed parameters{ #specify the model we will use
vector[N] lambda;
vector[N] epsilon; #amount of dispersion
for (i in 1:N)
epsilon[i]<-sigma_epsilon*epsilon_raw[i];
for (i in 1:N)
lambda[i] <- beta*x[i]+a[gene[i]]+epsilon[i];#specify the group
}
model { #give the prior distribution
beta ~ normal(0,10);
a ~ normal(0, sigma_a);
epsilon_raw~normal(0,1);
y ~ poisson_log(lambda); #y and y_hat should have same type
}
"
N<-dim(table)[1]
J<-dim(table1)[1]
gene<-as.numeric(table$gene)
genelevel<-length(unique(gene))
index<-match(gene, unique(gene))
M1_table<-list(N=N, J=J, y=table$envarpfc,
x=table$envarp,gene=index)
fit1 <- stan(model_code=gene_code, data=M1_table, iter=1000, chains=4)
fit1 <- stan(model_code=gene_code, data=M1_table, iter=2000, chains=4)
fit1 <- stan(model_code=gene_code, data=M1_table, iter=3000, chains=4)
fit1 <- stan(model_code=gene_code, data=M1_table, iter=5000, chains=4)
table <- read.table("D:/GitHubRepositories/DataStats/Data_Analysis_Duke/SQProject/exon_level_process_v2.txt")
##  table<-read.table("C:/Users/shuaiqi/Desktop/duke/Andrew/data/for_asa/other_stuff/exon_level_process_v3.txt")
## assign column names
colnames(table) <- c("chr", "gene", "dom", "subdom", "exon", "gene.dom",
"gene.dom.subdom",
"envarp",    # pass
"envarpf",   # pass functional
"envarpfr",  # pass functional rare
"emutr")     # mutation rate
## attract data from the original table??
table<-within(table,envarpfc<-envarpf-envarpfr)#y
table<-within(table,gene<-factor(gene))
table<-within(table,gene.dom<-factor(gene.dom))
table<-within(table,gene.dom.subdom<-factor(gene.dom.subdom))
# table<-table[1:1000,]
# for the use of counting number of gene
sumenvarp<-aggregate(table$envarp, by=list(Category=table$gene), FUN=sum)
sumenvarpfc<-aggregate(table$envarpfc, by=list(Category=table$gene), FUN=sum)[,2]
## simplify table1
table1<-data.frame(cbind(sumenvarp,sumenvarpfc))
## assign column names to table1
colnames(table1)<-c("gene","sumenvarp","sumenvarpfc")
gene_code<-"
data{   #get the data we have
int <lower=0> N; #number of obs
int <lower=0> J; #number of gene level
int <lower=1,upper=J> gene[N];
vector[N] x;  #x
int <lower=0> y[N] ; #y
}
parameters{ #specify the parameter we want to know
vector[J] a;  #random intercept when gene is the level
real <lower=0> sigma_a;  #variance of intercept
real <lower=0> sigma_epsilon; #variance of dispersion
real beta;    #common slope;
vector[N] epsilon_raw;
}
transformed parameters{ #specify the model we will use
vector[N] lambda;
vector[N] epsilon; #amount of dispersion
for (i in 1:N)
epsilon[i]<-sigma_epsilon*epsilon_raw[i];
for (i in 1:N)
lambda[i] <- beta*x[i]+a[gene[i]]+epsilon[i];#specify the group
}
model { #give the prior distribution
beta ~ normal(0,10);
a ~ normal(0, sigma_a);
epsilon_raw~normal(0,1);
y ~ poisson_log(lambda); #y and y_hat should have same type
}
"
N<-dim(table)[1]
J<-dim(table1)[1]
gene<-as.numeric(table$gene)
genelevel<-length(unique(gene))
index<-match(gene, unique(gene))
M1_table<-list(N=N, J=J, y=table$envarpfc,
x=table$envarp,gene=index)
fit1 <- stan(model_code=gene_code, data=M1_table, iter=2000, chains=4)
fit1 <- stan(model_code=gene_code, data=M1_table, iter=200, chains=4)
q()
335.00+26.79+14.98+6.59
q()
## ShuaiQi's Project
## Date 11-04-2015
## Aim:
## @ authors:
## Data source:
## Models:
## Parameters:
## Data source and copyright?
## Read in table from local hard drive:
## setup the working directory to where exon_level_process_v2.txt locates
##########################################
## Part One Read in the data
## create the tables
##########################################
table <- read.table("exon_level_process_v2.txt")
## table <- read.table("D:/GitHub/Stats/Data_Analysis_Duke/SQProject/exon_level_process_v2.txt")
# table<-read.table("C:/Users/shuaiqi/Desktop/duke/Andrew/data/for_asa/other_stuff/exon_level_process_v3.txt")
## assign column names
colnames(table) <- c("chr", "gene", "dom", "subdom", "exon", "gene.dom",
"gene.dom.subdom",
"envarp",    # pass
"envarpf",   # pass functional
"envarpfr",  # pass functional rare
"emutr")     # mutation rate
## attract data from the original table??
table<-within(table,envarpfc<-envarpf-envarpfr)#y
table<-within(table,gene<-factor(gene))
table<-within(table,gene.dom<-factor(gene.dom))
table<-within(table,gene.dom.subdom<-factor(gene.dom.subdom))
##
table<-table[1:1000,]
#for the use of counting number of gene
sumenvarp<-aggregate(table$envarp, by=list(Category=table$gene), FUN=sum)
sumenvarpfc<-aggregate(table$envarpfc, by=list(Category=table$gene), FUN=sum)[,2]
## simplify table1
table1<-data.frame(cbind(sumenvarp,sumenvarpfc))
## assign column names to table1
colnames(table1)<-c("gene","sumenvarp","sumenvarpfc")
#######################################################
## Part Two
## Call Stan to do the simutation
#######################################################
#install.packages("rstan")
library("rstan")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
##gene_code
######################
# init the parameters
######################
N<-dim(table)[1]
J<-dim(table1)[1]
gene<-as.numeric(table$gene)
genelevel<-length(unique(gene))
index<-match(gene, unique(gene))
M1_table<-list(N=N, J=J, y=table$envarpfc,
x=table$envarp,gene=index)
## fit rstan()
## fit the model
fit0 <- stan(file = "possion.gene.rstan .stan")
## fit the model with data
fit1 <- stan(fit=fit0, data = M1_table, iter = 3000, chains=4)
## fit1 <- stan(model_code = gene_code, data=M1_table, iter=2000, chains=4)
print(fit1, "a")
print (fit1, "beta")
answer1<-extract(fit1, permuted = TRUE)
effect<-answer1$a
write.table(effect, "Allgene_effectstan.txt", sep="\t")
#check convergence
pdf("Allgene_traceplot.pdf")
traceplot(fit1,pars=c("a","beta"))
traceplot(fit1, pars=c("beta", "beta"))
dev.off()
##################
## END
##################
setwd("D:/GitHubRepositories/DataStats/Data_Analysis_Duke/SQProject")
## ShuaiQi's Project
## Date 11-04-2015
## Aim:
## @ authors:
## Data source:
## Models:
## Parameters:
## Data source and copyright?
## Read in table from local hard drive:
## setup the working directory to where exon_level_process_v2.txt locates
##########################################
## Part One Read in the data
## create the tables
##########################################
table <- read.table("exon_level_process_v2.txt")
## table <- read.table("D:/GitHub/Stats/Data_Analysis_Duke/SQProject/exon_level_process_v2.txt")
# table<-read.table("C:/Users/shuaiqi/Desktop/duke/Andrew/data/for_asa/other_stuff/exon_level_process_v3.txt")
## assign column names
colnames(table) <- c("chr", "gene", "dom", "subdom", "exon", "gene.dom",
"gene.dom.subdom",
"envarp",    # pass
"envarpf",   # pass functional
"envarpfr",  # pass functional rare
"emutr")     # mutation rate
## attract data from the original table??
table<-within(table,envarpfc<-envarpf-envarpfr)#y
table<-within(table,gene<-factor(gene))
table<-within(table,gene.dom<-factor(gene.dom))
table<-within(table,gene.dom.subdom<-factor(gene.dom.subdom))
##
table<-table[1:1000,]
#for the use of counting number of gene
sumenvarp<-aggregate(table$envarp, by=list(Category=table$gene), FUN=sum)
sumenvarpfc<-aggregate(table$envarpfc, by=list(Category=table$gene), FUN=sum)[,2]
## simplify table1
table1<-data.frame(cbind(sumenvarp,sumenvarpfc))
## assign column names to table1
colnames(table1)<-c("gene","sumenvarp","sumenvarpfc")
#######################################################
## Part Two
## Call Stan to do the simutation
#######################################################
#install.packages("rstan")
library("rstan")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
##gene_code
######################
# init the parameters
######################
N<-dim(table)[1]
J<-dim(table1)[1]
gene<-as.numeric(table$gene)
genelevel<-length(unique(gene))
index<-match(gene, unique(gene))
M1_table<-list(N=N, J=J, y=table$envarpfc,
x=table$envarp,gene=index)
## fit rstan()
## fit the model
fit0 <- stan(file = "possion.gene.rstan .stan")
## fit the model with data
fit1 <- stan(fit=fit0, data = M1_table, iter = 3000, chains=4)
## fit1 <- stan(model_code = gene_code, data=M1_table, iter=2000, chains=4)
print(fit1, "a")
print (fit1, "beta")
answer1<-extract(fit1, permuted = TRUE)
effect<-answer1$a
write.table(effect, "Allgene_effectstan.txt", sep="\t")
#check convergence
pdf("1000gene_traceplot.pdf")
traceplot(fit1,pars=c("a","beta"))
traceplot(fit1, pars=c("beta", "beta"))
dev.off()
##################
## END
##################
