## simplify table1
table1<-data.frame(cbind(sumenvarp,sumenvarpfc))
## assign column names to table1
colnames(table1)<-c("gene","sumenvarp","sumenvarpfc")
gene_code<-"
data{   #get the data we have
int <lower=0> N; #number of obs
int <lower=0> J; #number of gene level
int <lower=1,upper=J> gene[N];
vector[N] x;  #x
int <lower=0> y[N] ; #y
}
parameters{ #specify the parameter we want to know
vector[J] a;  #random intercept when gene is the level
real <lower=0> sigma_a;  #variance of intercept
real <lower=0> sigma_epsilon; #variance of dispersion
real beta;    #common slope;
vector[N] epsilon_raw;
}
transformed parameters{ #specify the model we will use
vector[N] lambda;
vector[N] epsilon; #amount of dispersion
for (i in 1:N)
epsilon[i]<-sigma_epsilon*epsilon_raw[i];
for (i in 1:N)
lambda[i] <- beta*x[i]+a[gene[i]]+epsilon[i];#specify the group
}
model { #give the prior distribution
beta ~ normal(0,10);
a ~ normal(0, sigma_a);
epsilon_raw~normal(0,1);
y ~ poisson_log(lambda); #y and y_hat should have same type
}
"
N<-dim(table)[1]
J<-dim(table1)[1]
gene<-as.numeric(table$gene)
genelevel<-length(unique(gene))
index<-match(gene, unique(gene))
M1_table<-list(N=N, J=J, y=table$envarpfc,
x=table$envarp,gene=index)
fit1 <- stan(model_code=gene_code, data=M1_table, iter=2000, chains=4)
fit1 <- stan(model_code=gene_code, data=M1_table, iter=200, chains=4)
q()
335.00+26.79+14.98+6.59
q()
height = rnorm(100)
earn = height + rnorm(100)
dat = data.frame(height, earn)
library(ggplot2)
qplot(height, earn) + geom_smooth(method = lm, se=F)
# install all the important stuff
install.packages('devtools')
install_github('rmcelreath/glmer2stan')
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
source_url("https://github.com/stan-dev/shinystan/raw/develop/install_shinystan.R")
install_shinystan()
install.packages('lmerTest')
library(devtools)
library(shinyStan)
library(glmer2stan)
library(rstan)
library(lmerTest)
# load my functions
source('mypostplot.R')
source('myglmer2stan.R')
source('panelfuns.R')
source('postPairs.R')
source('stanmer2.R')
source('propInRope.R')
# Outline
# 1) Intro to STAN
# 2) glmer2stan
# 3) my functions
# 4) shinyStan
####### Intro to STAN ########
# STAN is...
#   - MCMC sampler similar to JAGS and BUGS
#   - Runs in C++
#   - rstan is the interface between r and STAN
#   - write code -> compile model -> sample -> return output
height = rnorm(100)
earn = height + rnorm(100)
dat = data.frame(height,earn)
library(ggplot2)
qplot(height,earn)+geom_smooth(method=lm,se=F)
# Simple frequentist model
summary(lm(earn~height,data = dat))
confint(lm(earn~height,data = dat))
# Important annoying fact #1: STAN needs data as a list not a dataframe!!
# specify data as well as meta data (i.e. the number of groups)
earn_dat <- list(N = 100 , #specify number of observations as a scalar
earn = earn, # data vector
height = height # data vector (predictor)
)
earn_code = 'data {
// First we declare all of our variables in the data block
int<lower=0> N;// Number of observations
vector[N] earn; //Identify our predictor as a vector
vector[N] height;  //Identify our outcome variable as a vector
}
parameters {
vector[2] beta; //Our betas are a vector of length 2 (intercept and slope)
real<lower=0> sigma; //error parameter
}
model {
//Priors
beta[1] ~ normal( 5 , .001); //intercept
beta[2] ~ normal( 0 , 100 ); //slope
sigma ~ uniform( 0 , 100 ); //error
earn ~ normal(beta[1] + beta[2] * height, sigma);
}'
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 100,
iter = 1000,
chains = 4)
print(fit1)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 100,
iter = 3000,
chains = 4)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 300,
iter = 3000,
chains = 4)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 3000,
iter = 3000,
chains = 4)
print(fit1)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 1000,
iter = 3000,
chains = 4)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 1000,
iter = 9000,
chains = 4)
print(fit1)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 1000,
iter = 19000,
chains = 4)
print(fit1)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 1000,
iter = 19000,
chains = 8)
print(fit1)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 1000,
iter = 29000,
chains = 8)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 100,
iter = 10000,
chains = 4)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 1000,
iter = 10000,
chains = 4)
fit1 <- stan(model_code = earn_code, data = earn_dat,
warmup = 1000,
iter = 30000,
chains = 4)
print(fit1)
fit1_samples = extract(fit1)
str(fit1_samples)
# subset just the betas
betas = fit1_samples[[1]]
qplot(betas[,1]) # intercept posterior samples
qplot(betas[,2]) # slope posterior samples
int = mean(betas[,1]) # posterior intercept estimate
slope = mean(betas[,2])# posterior slope estimate
# check fit
qplot(height,earn)+geom_smooth(method=lm,se=F)+geom_abline(intercept=int,slope=slope,color='red')
# View trace plots of each parameter (fuzzier is better)
traceplot(fit1)
data(sleepstudy) # load data
library(ggplot2)
m1_lm <- lm(Reaction~Days,data=sleepstudy)
confint(m1_lm)
summary(m1_lm)
ggplot(sleepstudy,aes(x=Days,y=Reaction))+
geom_point()+
guides(color=F)+
geom_smooth(method=lm,se = F)
# with nesting of intercepts and slopes within subjs
ggplot(sleepstudy,aes(x=Days,y=Reaction,color=Subject,group=Subject))+
geom_point()+
guides(color=F)+
geom_smooth(method=lm,se = F)
# model in regular ol' lme4, random slopes and intercepts set
m1_lme4 <- lmer( Reaction ~ Days + (Days | Subject), sleepstudy, REML=FALSE )
summary(m1_lme4)
confint(m1_lme4)
AIC(m1_lm,m1_lme4) # fixed effects the same, model is more parsimonious i.e. random effects = good
# Important annoying fact #2: STAN doesn't deal with non-numeric variables!!
# - factors must be converted into contrast codes (don't worry glmer2stan does that for you)
# - grouping variables,however, must be manually converted to integers
# convert factor of subject ids to sequential integers
sleepstudy$subject_index <- as.integer(as.factor(sleepstudy$Subject))
# basic MCMC parameter, should probably be a bit higher but we dont have all day!
nwarm = 100 # burn-in period, these samples are not included in estimation
niter = 500 # number of steps per chain, more is better (but takes longer)
chains = 4 # number of chains, usually at least 2
m1_g2s <- lmer2stan( Reaction ~ Days + (Days | subject_index), data=sleepstudy,
calcWAIC=T,
warmup=nwarm,
iter = niter,
chains=chains)
install_github('rmcelreath/glmer2stan')
m1_g2s <- lmer2stan( Reaction ~ Days + (Days | subject_index), data=sleepstudy,
calcWAIC=T,
warmup=nwarm,
iter = niter,
chains=chains)
install_rstan()
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
source('https://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_github('rmcelreath/glmer2stan')
source('https://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
library(devtools)
library(shinyStan)
install.packages('lmerTest')
install.packages("lmerTest")
install.packages("lmerTest")
install.packages("lmerTest")
install.packages("lmerTest")
install.packages("lmerTest")
install.packages("lmerTest")
setwd("D:/GitHubRepositories/GenicIntolerance/HomozygosityMutations")
###########################################################################################################
##
## Homozygosity Project
## Date 12-29-2015
## Aim: Simulation Loss of Homozygosity Population Strat 1
## @ authors: Andrew Allen
## @ student: Jeff Du
## Data source: Simulation
## Models:  Poisson
## Parameters:
##
##
###########################################################################################################
nsites <- 5         # number of polymorphic qualifying sites in gene
np1 <- 1000         # sample size popn1
np2 <- 1000         # sample size popn2
n <- np1+np2
p.upper <- 0.05     # upper bound on qualifying variants
b.v <- .95          # baseline viability (probability of being viable give zero or one affected gene copies)
bta <- 1            # relative risk of viability given 2 affected copies versus baseline
nsim <- 1           #
s <- c(rep(0,nsim)) #
g <- array(0,dim=c(n,2*nsites,2))              # two matric, dim: 2000, 10, 2
x <- c(rep(0,n))                               # x replicates n=2000 values in 0
v <- c(rep(0,n))                               # v ...
n1 <- c(rep(0,n))                              # n1 ...
n2 <- c(rep(0,n))                              # n2 ...
pi2.g <- c(rep(0,n))                           # pi2.g ...
p1 <- runif(nsites, min=2/(2*np1), max=p.upper)   # generate random deviates from 0.001 to 0.5
p2 <- runif(nsites, min=2/(2*np2), max=p.upper)   # generate random deviates from 0.001 to 0.5
p <- c(p1*np1/n, p2*np2/n)                        # merge p1*2 and p2*2
## prob, a matrix with 3 rows and 10 cols
## row[0] ~ n of X = 0 no
## row[1] ~ n of X = 1 het
## row[2] ~ n of X = 2 hom
## each rol represents a gene
prob <- matrix(0,3,2*nsites)      # site specific genotype probabilities
## generate and assign values to prob[][]
for(i in 1:(2*nsites)){
prob[1,i] <- (1-p[i])^2
prob[2,i] <- 2*p[i]*(1-p[i])
prob[3,i] <- p[i]^2
}
## the prob matrix:
#> prob
###           [,1]         [,2]         [,3]         [,4]         [,5]         [,6]         [,7]         [,8]         [,9]        [,10]
#[1,] 9.828186e-01 0.9675650920 9.948101e-01 9.945325e-01 0.9691299458 9.938453e-01 0.9679320811 0.9750880297 0.9712017451 9.849940e-01
#[2,] 1.710694e-02 0.0321675484 5.183147e-03 5.460042e-03 0.0306280643 6.145237e-03 0.0318066244 0.0247548556 0.0285878797 1.494928e-02
#[3,] 7.444081e-05 0.0002673596 6.751292e-06 7.493987e-06 0.0002419898 9.499450e-06 0.0002612945 0.0001571148 0.0002103752 5.672141e-05
#########################################################################
##
## Figure out how many genotype you can have given certain number of loci
##
## function_baseB:
baseB <- function(x, digits, B){
baseB<-c(rep(0,digits))
temp<-x
count<-1
while(temp>0){
baseB[count] <- temp%%B
temp <- temp%/%B
count < -count+1
}
return(baseB)
}
###################################################################
###################################################################
## function_bigN
bigN<-function(digits){
bigN<-0
for(i in 1:digits){
bigN<-bigN+2*3^(i-1)
}
return(bigN)
}
###################################################################
## mu denotes mutations?
mu <- 0
for(i in 1:bigN(2*nsites)){
g.temp <- baseB(i,2*nsites,3)
n1.temp <- sum(g.temp==1)
n2.temp <- sum(g.temp==2)
if(n1.temp<=1 & n2.temp==0) {pi2.g.temp<-0}
if(n1.temp>1 & n2.temp==0) {pi2.g.temp<-1-(1/2)^(n1.temp-1)}
if(n2.temp>0) {pi2.g.temp<-1}
rho <- 1
for(j in 1:2*nsites){
rho<-rho*prob[g.temp[j]+1,j]
}
mu<-mu+rho*pi2.g.temp
}
## after for loop, mu = 27702.14
## nnz
nnz <- 0
########################################
##
for(j in 1:nsim){
print(j)
#simulate data under alternative
count <- 1
### while loop for population 1
while(count<=np1){
for(c in 1:2){
for(l in 1:nsites){
g[count,l,c]<-rbinom(1,1,p1[l])         ## genotypes for population.
}
}
## count -> person
## ,, site
## 1 or 2, gene copy
temp1<-sum(g[count,,1])            ## number of sites person 'count' has a affected 1st gene copy.
temp2<-sum(g[count,,2])            ## number of sites person 'count' has a affected 2nd gene copy.
x[count] <- (temp1>0)+(temp2>0)    ## number of gene copies that are affected for individual 'count';
if(x[count]<2){p.v<-b.v}           ## baseline of virable
else{p.v<-b.v*bta}                 ## p.v => prob of being viable
v[count]<-rbinom(1,1,p.v)          ## viability of person 'count'
if(v[count]==1){count<-count+1}
} #end while(count<=np1)             ## the while loop for population 1
### while loop for population 2
while(count<=n){
for(c in 1:2){
for(l in (nsites+1):(2*nsites)){
g[count,l,c]<-rbinom(1,1,p2[l-nsites])
}
}
temp1<-sum(g[count,,1])
temp2<-sum(g[count,,2])
x[count]<-(temp1>0)+(temp2>0)
if(x[count]<2){p.v<-b.v}
else{p.v<-b.v*bta}
v[count]<-rbinom(1,1,p.v)
if(v[count]==1){count<-count+1}
} #end while(count<=n)               ## the while loop for population 2
## g.obs: genotypes observed, a 1000*10 matrix
## so, next step to do, is to plug data from matric in LizDeidentified.zip?
g.obs<-g[,,1]+g[,,2]
###############################
## for loop for Pie_2|g
for(i in 1:n){
n1[i] <- sum(g.obs[i,]==1)
n2[i] <- sum(g.obs[i,]==2)
if(n1[i]<=1 & n2[i]==0) {pi2.g[i]<-0}
if(n1[i]>1 & n2[i]==0) {pi2.g[i]<-1-(1/2)^(n1[i]-1)}
if(n2[i]>0) {pi2.g[i]<-1}
} #end for i in 1:n loop;
####################################################
## s.1,.....,s.nsim <= statistic in nsim simulations
s.j<-pi2.g-mu
if(var(s.j)!=0){
s[j]<-sum(s.j)/sqrt(n*var(s.j))
nnz<-nnz+1
}
}     ## end for j in 1:nism loop
########################################
print(nnz)
########################################
## POWER!
# sum
sum(s<qnorm(.05))/nsim
##? s<qnorm(0.05)) = 1, nsim = 1. Confused...
## END
prob
nnz
sum(prob[,1])
sum(prob[,2])
g
dim(g)
prob
335.00 + 26.79 + 14.91 + 10.12
7^1000
7^100
library(swirl)
install.packages("swirl")
library(swirl)
ls()
rm(list = ls())
library(swirl)
swirl()
swirl()
swirl()
5+7
x <- 5_7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
...
---
---
;
...
z*2 + 100
z*2 + 1000
my_sqrt
my_div
library(swirl)
install_from_swirl("Statistical Inference")
library(swirl)
swirl()
60008^11
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
dir()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd
old.dir <- getwd()
100!
dir.create(testdir)
dir.create(old.dir, "testdir")
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename(mytest.R, mytest2.R)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path('folder1', 'folder2')
?dir.create
dir.create
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
old.dir
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?:
?':'
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- c(num_vect < 1)
tf <- num_vect < 1
tf
newv <- num_vect >= 6
num_vect >= 6
61108^11
61108^5
61108^4
61108^3
61108^2
