
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################
> ## ShuaiQi's Project
> ## Date 	03-25-2016
> ## Aim: 	Try All Genes
> ## @ authors: 	SQ
> ## Data source: /dscrhome/gd44/SQProject/RStan/2016/exon_level_process_v2.txt
> ## Models: 	Bayesian Stan
> ## Parameters:	
> ## Outputs: 	
> 
> 
> ## Data source and copyright?
> ## Read in table from local hard drive:
> ## setup the working directory to where exon_level_process_v2.txt locates
> 
> ##########################################
> ## Part One Read in the data
> ## create the tables
> ##########################################
> 
> ## Read in exon level data from the same directory
> table <- read.table("exon_level_process_v2.txt")
> #obs<-c(1:dim(table)[1])
> #table<-cbind(obs,table)
> #table<-read.table("C:/Users/shuaiqi/Desktop/duke/Andrew/data/for_asa/other_stuff/exon_level_process_v3.txt")
> 
> colnames(table)<- c("chr", "gene", "dom", "subdom", "exon", "gene.dom", 
+              "gene.dom.subdom", 
+              "envarp",    # pass
+              "envarpf",   # pass functional
+              "envarpfr",  # pass functional rare
+              "emutr")     # mutation rate 
> 
> table<-within(table,envarpfc<-envarpf-envarpfr)#y
> table<-within(table,gene<-factor(gene))
> table<-within(table,gene.dom<-factor(gene.dom))
> table<-within(table,gene.dom.subdom<-factor(gene.dom.subdom))
> table<-table[which(table$envarp!=0), ]
> table$x=scale(table$envarp)
> table<-table[1:1000,]
> 
> 
> #for the use of counting number of gene
> sumenvarp<-aggregate(table$envarp, by=list(Category=table$gene), FUN=sum)
> sumenvarpfc<-aggregate(table$envarpfc, by=list(Category=table$gene), FUN=sum)[,2]
> table1<-data.frame(cbind(sumenvarp,sumenvarpfc))
> colnames(table1)<-c("gene","sumenvarp","sumenvarpfc")
> 
> 
> 
> 
> 
> 
> 
> #######################################################
> ## Part Two
> ## Call Stan to do the simutation
> #######################################################
> 
> hiernormalinvg<-"
+ data{ #get the data set 
+ int<lower=0> N;   # number of exon level
+ int<lower=0> J;   # number of gene level
+ int <lower=1,upper=J> gene[N];  #index of gene
+ int <lower=1,upper=N> exon[N];  #index of exon 
+ vector[N] xij;   #x at exon level
+ vector[N] yij; #y at exon level
+ }
+ parameters{ #specify the parameter we want to know 
+ real beta;  #common slope for the exon level
+ real mu;      #common intercept for the exon level
+ vector[N] aij; #random intercept for the exon level
+ real <lower=0> sigma_aj2[J];  #variance of intercept at exon level 
+ vector[J] aj; #random intercept for the gene level 
+ real <lower=0> sigma_a;  #variance of intercept at gene level
+ real <lower=0> sigma; #variance of yij
+ real <lower=0> eps; #hyperparameter for sigma_aj
+ }
+ transformed parameters{ #specify the model we will use 
+ }
+ model { #give the prior distribution 
+    vector[N] lambdaij; #exon level model
+    for (i in 1:N)
+    lambdaij[i] <- mu+beta*xij[i]+aij[exon[i]]+aj[gene[i]];#specify the gene group
+    beta ~normal(0,1);
+    sigma ~ uniform(0, 20);
+    sigma_a ~uniform(0,10);
+    eps ~ inv_gamma(0.1,0.1);
+    sigma_aj2 ~inv_gamma(eps,eps);
+    aj ~ normal(0, sigma_a);
+    yij ~ normal(lambdaij,sigma);
+    for (i in 1:N)
+        aij[i]~ normal(0,sqrt(sigma_aj2[gene[i]]));
+ }
+ "
> 
> 
> library("rstan")
Loading required package: Rcpp
Loading required package: ggplot2
rstan (Version 2.8.0, packaged: 2015-09-19 14:48:38 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> 
> 
> J<-dim(table1)[1] #gene number 
> N<-dim(table)[1]  #exon number 
> xij=c(table$envarp)
> xj=table1$sumenvarp
> yij=table$envarpfc
> yj=table1$sumenvarpfc
> 
> gene<-as.numeric(table$gene) #list
> genelevel<-length(unique(gene)) #number
> indexg<-match(gene, unique(gene))  #list
> exon<-c(1:length(table$envarpfc))
> 
> M1_table<-list(N=N, J=J, xij=xij,
+ yij=yij,gene=indexg, exon=exon)
> 
> control=list(adapt_delta=0.99,max_treedepth=12)
> 
> 
> 
> fitinv<-stan(model_code=hiernormalinvg, data=M1_table,iter=20000,warmup=19000,chains=4)

SAMPLING FOR MODEL '034b30b153f74aab7fd06cb101d4ae8a' NOW (CHAIN 1).

Chain 1, Iteration:     1 / 20000 [  0%]  (Warmup)
Chain 1, Iteration:  2000 / 20000 [ 10%]  (Warmup)
Chain 1, Iteration:  4000 / 20000 [ 20%]  (Warmup)
Chain 1, Iteration:  6000 / 20000 [ 30%]  (Warmup)
Chain 1, Iteration:  8000 / 20000 [ 40%]  (Warmup)
Chain 1, Iteration: 10000 / 20000 [ 50%]  (Warmup)
Chain 1, Iteration: 12000 / 20000 [ 60%]  (Warmup)
Chain 1, Iteration: 14000 / 20000 [ 70%]  (Warmup)
Chain 1, Iteration: 16000 / 20000 [ 80%]  (Warmup)
Chain 1, Iteration: 18000 / 20000 [ 90%]  (Warmup)
Chain 1, Iteration: 19001 / 20000 [ 95%]  (Sampling)
Chain 1, Iteration: 20000 / 20000 [100%]  (Sampling)
#  Elapsed Time: 3646.46 seconds (Warm-up)
#                330.34 seconds (Sampling)
#                3976.8 seconds (Total)

The following numerical problems occured the indicated number of times on chain 1
                                                                                   count
Exception thrown at line 30: inv_gamma_log: Shape parameter is 0, but must be > 0!     1
If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.

SAMPLING FOR MODEL '034b30b153f74aab7fd06cb101d4ae8a' NOW (CHAIN 2).

Chain 2, Iteration:     1 / 20000 [  0%]  (Warmup)
Chain 2, Iteration:  2000 / 20000 [ 10%]  (Warmup)
Chain 2, Iteration:  4000 / 20000 [ 20%]  (Warmup)
Chain 2, Iteration:  6000 / 20000 [ 30%]  (Warmup)
Chain 2, Iteration:  8000 / 20000 [ 40%]  (Warmup)
Chain 2, Iteration: 10000 / 20000 [ 50%]  (Warmup)
Chain 2, Iteration: 12000 / 20000 [ 60%]  (Warmup)
Chain 2, Iteration: 14000 / 20000 [ 70%]  (Warmup)
Chain 2, Iteration: 16000 / 20000 [ 80%]  (Warmup)
Chain 2, Iteration: 18000 / 20000 [ 90%]  (Warmup)
Chain 2, Iteration: 19001 / 20000 [ 95%]  (Sampling)
Chain 2, Iteration: 20000 / 20000 [100%]  (Sampling)
#  Elapsed Time: 2122.04 seconds (Warm-up)
#                241.09 seconds (Sampling)
#                2363.13 seconds (Total)

The following numerical problems occured the indicated number of times on chain 2
                                                                                count
Exception thrown at line 32: normal_log: Scale parameter is 0, but must be > 0!     1
If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.

SAMPLING FOR MODEL '034b30b153f74aab7fd06cb101d4ae8a' NOW (CHAIN 3).

Chain 3, Iteration:     1 / 20000 [  0%]  (Warmup)
Chain 3, Iteration:  2000 / 20000 [ 10%]  (Warmup)
Chain 3, Iteration:  4000 / 20000 [ 20%]  (Warmup)
Chain 3, Iteration:  6000 / 20000 [ 30%]  (Warmup)
Chain 3, Iteration:  8000 / 20000 [ 40%]  (Warmup)
Chain 3, Iteration: 10000 / 20000 [ 50%]  (Warmup)
Chain 3, Iteration: 12000 / 20000 [ 60%]  (Warmup)
Chain 3, Iteration: 14000 / 20000 [ 70%]  (Warmup)
Chain 3, Iteration: 16000 / 20000 [ 80%]  (Warmup)
Chain 3, Iteration: 18000 / 20000 [ 90%]  (Warmup)
Chain 3, Iteration: 19001 / 20000 [ 95%]  (Sampling)
Chain 3, Iteration: 20000 / 20000 [100%]  (Sampling)
#  Elapsed Time: 4672.52 seconds (Warm-up)
#                270.42 seconds (Sampling)
#                4942.94 seconds (Total)

The following numerical problems occured the indicated number of times on chain 3
                                                                                        count
Exception thrown at line 30: inv_gamma_log: Shape parameter is inf, but must be finite!     1
Exception thrown at line 32: normal_log: Scale parameter is 0, but must be > 0!             1
If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.

SAMPLING FOR MODEL '034b30b153f74aab7fd06cb101d4ae8a' NOW (CHAIN 4).

Chain 4, Iteration:     1 / 20000 [  0%]  (Warmup)
Chain 4, Iteration:  2000 / 20000 [ 10%]  (Warmup)
Chain 4, Iteration:  4000 / 20000 [ 20%]  (Warmup)
Chain 4, Iteration:  6000 / 20000 [ 30%]  (Warmup)
Chain 4, Iteration:  8000 / 20000 [ 40%]  (Warmup)
Chain 4, Iteration: 10000 / 20000 [ 50%]  (Warmup)
Chain 4, Iteration: 12000 / 20000 [ 60%]  (Warmup)
Chain 4, Iteration: 14000 / 20000 [ 70%]  (Warmup)
Chain 4, Iteration: 16000 / 20000 [ 80%]  (Warmup)
Chain 4, Iteration: 18000 / 20000 [ 90%]  (Warmup)